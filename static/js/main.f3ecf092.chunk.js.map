{"version":3,"sources":["components/HourlyTemp.js","components/HourlyWind.js","components/Weather.js","App.js","index.js"],"names":["HourlyTemp","props","state","hourlyTime","hTime","hourlyTemp","hTemp","nextProps","this","setState","id","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","options","scales","xAxes","gridLines","display","ticks","fontColor","yAxes","beginAtZero","tooltips","callbacks","tooltipItem","Number","yLabel","legend","title","text","fontSize","position","fontFamily","React","Component","HourlyWind","hourlyWindSpeed","hWindSpeed","bodyFontSize","Weather","userCity","locationKey","places","keys","localTime","temp","feelsTemp","hasPrec","isDay","pressure","pressureTendency","uvIndex","visibility","weatherText","wind","windDirection","handleCity","bind","setKey","toggleCities","getCity","fetch","res","json","city","console","log","length","map","o","EnglishName","AdministrativeArea","Country","Key","alert","mode","w","Temperature","Metric","Value","RealFeelTemperature","HasPrecipitation","IsDayTime","Pressure","PressureTendency","LocalizedText","UVIndex","Visibility","WeatherText","Wind","Speed","Direction","Degrees","LocalObservationDateTime","slice","replace","hour","parseInt","DateTime","Math","round","prevProps","prevState","getLocationKey","getCurrentWeather","getHourlyWeather","document","getElementById","value","e","i","target","getAttribute","finalKey","style","time","className","type","placeholder","place","index","key","data-key","onClick","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f3ecf092.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nclass HourlyTemp extends React.Component{\r\n constructor(props){\r\n   super(props)\r\n    this.state={\r\n      hourlyTime:props.hTime,\r\n      hourlyTemp:props.hTemp,\r\n    }\r\n }\r\n\r\n componentWillReceiveProps(nextProps) {\r\n  // This will erase any local state updates!\r\n  // Do not do this.\r\n  this.setState({ hourlyTime:nextProps.hTime,\r\n                  hourlyTemp:nextProps.hTemp});\r\n}\r\n \r\n      \r\n  \r\n  \r\n    render(){\r\n        return(\r\n          <div id=\"box3\">\r\n          <Line\r\n            data={{\r\n              labels:this.state.hourlyTime,\r\n              datasets: [\r\n                {\r\n                  label: '',\r\n                  fill:'start',\r\n                  lineTension: 0.5,\r\n                  backgroundColor: 'rgba(255,215,0,0.8)',\r\n                  borderColor: 'orange',\r\n                  borderWidth: 1,\r\n                  data:this.state.hourlyTemp,\r\n                }\r\n              ],\r\n            }\r\n            }\r\n              options={{\r\n                scales: {\r\n                     xAxes: [{\r\n                        gridLines: {\r\n                           display: false\r\n                        },\r\n                        \r\n                        ticks: {\r\n                          fontColor:'black',\r\n                       }\r\n                     }],\r\n                     yAxes: [{\r\n                        ticks: {\r\n                           beginAtZero: true, \r\n                           display:false\r\n                        },\r\n                        gridLines: {\r\n                           display: false\r\n                        }\r\n                     }]\r\n                    },\r\n                  tooltips:{\r\n                    callbacks: {\r\n                      label: function(tooltipItem) {\r\n                          return Number(tooltipItem.yLabel) + \" 'C\";\r\n                      }\r\n                  }\r\n                  },\r\n                  legend:{\r\n                    display:false\r\n                  },\r\n                  title:{\r\n                    text:\"Temperature\",\r\n                    display:true,\r\n                    fontSize:14,\r\n                    fontColor:\"purple\",\r\n                    position:'bottom',\r\n                    fontFamily:'helvetica',\r\n                  }\r\n              \r\n              }}\r\n               \r\n            \r\n          />\r\n        </div>\r\n        )}\r\n  }\r\nexport default HourlyTemp;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nclass HourlyWind extends React.Component{\r\n constructor(props){\r\n   super(props)\r\n    this.state={\r\n      hourlyWindSpeed:props.hWindSpeed,\r\n      hourlyTime:props.hTime,\r\n    }\r\n }\r\n\r\n componentWillReceiveProps(nextProps) {\r\n  // This will erase any local state updates!\r\n  // Do not do this.\r\n  this.setState({ hourlyTime:nextProps.hTime,\r\n                  hourlyWindSpeed:nextProps.hWindSpeed});\r\n}\r\n \r\n      \r\n  \r\n  \r\n    render(){\r\n        return(\r\n          <div id=\"hourlyWind\">\r\n          <Line\r\n            data={{\r\n              labels:this.state.hourlyTime,\r\n              datasets: [\r\n                {\r\n                  label: 'Wind Speed',\r\n                  fill:'start',\r\n                  lineTension: 0.5,\r\n                  backgroundColor: '#19d9fd',\r\n                  borderColor: 'blue',\r\n                  borderWidth: 2,\r\n                  data:this.state.hourlyWindSpeed,\r\n                }\r\n              ],\r\n            }\r\n            }\r\n              options={{\r\n                scales: {\r\n                     xAxes: [{\r\n                        gridLines: {\r\n                           display: false\r\n                        },\r\n                        ticks: {\r\n                          fontColor:'white',\r\n                       },\r\n                        \r\n                     }],\r\n                     yAxes: [{\r\n                        ticks: {\r\n                           beginAtZero: true, \r\n                           display:false\r\n                        },\r\n                        gridLines: {\r\n                           display: false\r\n                        }\r\n                     }]\r\n                    },\r\n                  tooltips:{\r\n                    callbacks: {\r\n                      label: function(tooltipItem) {\r\n                          return Number(tooltipItem.yLabel) + \" mi/h\";\r\n                      }\r\n                  },\r\n                  bodyFontSize: 20,\r\n                  },\r\n                  legend:{\r\n                    display:false\r\n                  },\r\n                  title:{\r\n                    text:\"Wind Speed\",\r\n                    display:true,\r\n                    fontSize:14,\r\n                    fontColor:\"white\",\r\n                    position:'bottom',\r\n                    fontFamily:'helvetica',\r\n                  }\r\n              \r\n              }}\r\n               \r\n            \r\n          />\r\n        </div>\r\n        )}\r\n  }\r\nexport default HourlyWind;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport HourlyTemp from './HourlyTemp'\r\nimport HourlyWind from './HourlyWind'\r\n\r\nclass Weather extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            userCity: \"\",\r\n            locationKey:\"\",\r\n            places:[\"London,London,United Kingdom\",\"London,Ontario,Canada\",\"London,Ohio,United States\",\r\n            \"LondonLine Islands,Kiribati\",\"London,California,United States\",\"London,Svalbard,Svalbard And Jan Mayen\"],\r\n            keys:[\"328328\", \"55489\", \"333298\", \"335012\", \"1123888\",\"453443\"],\r\n            \r\n            // current weather conditions\r\n                localTime:\"2021-01-14T10:20\",\r\n                temp:\"2\",\r\n                feelsTemp:\"1\",\r\n                hasPrec:false,\r\n                isDay:true,\r\n                pressure:\"3\",\r\n                pressureTendency:\"falling\",\r\n                uvIndex:\"0\",\r\n                visibility:\"1\",\r\n                weatherText:\"Mostly cloudy\",\r\n                wind:\"23\",\r\n                windDirection:\"360\",\r\n\r\n            // hourly weather conditions in arrays\r\n                hourlyTime: ['1pm','2pm','3pm','4pm','5pm','6pm','7pm','8pm'],\r\n                hourlyWindSpeed:[3,2,5,1,3,2,3,5],\r\n                hourlyTemp:[-1,-2,0,1,4,0,-1,3,2],\r\n            \r\n        }\r\n        this.handleCity = this.handleCity.bind(this);\r\n        this.setKey = this.setKey.bind(this);\r\n        this.toggleCities = this.toggleCities.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getCity()\r\n        \r\n    }\r\n\r\n    async getCity (){\r\n        const res = await fetch(\"https://geolocation-db.com/json/85249190-4601-11eb-9067-21b51bc8dee3\")\r\n        const data = await res.json();\r\n        this.setState({\r\n            userCity: data.city,\r\n        })\r\n    \r\n     }      \r\n\r\n     async getLocationKey(){\r\n        const res = await fetch(`https://dataservice.accuweather.com/locations/v1/cities/search?apikey=tYgqPzMGuVb2X0eBKTeMDLAODRNzpD8x&q=${this.state.userCity}`)\r\n        const data = await res.json();\r\n        console.log(data)\r\n        if(data.length!==0){\r\n        this.setState({\r\n            places:data.map(o=>o.EnglishName+\",\"+o.AdministrativeArea.EnglishName+\",\"+o.Country.EnglishName),\r\n            keys:data.map(o=>o.Key),\r\n            locationKey:data[0].Key,\r\n        })\r\n    }\r\n    else{\r\n        alert(\"Please enter a valid name\")\r\n    }\r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n    async getCurrentWeather(){\r\n        const res = await fetch(`https://dataservice.accuweather.com/currentconditions/v1/${this.state.locationKey}?apikey=tYgqPzMGuVb2X0eBKTeMDLAODRNzpD8x&details=true`,{mode:'cors'})\r\n        const data = await res.json();\r\n        const w = data[0];\r\n        console.log(w)\r\n        this.setState({\r\n                temp:w.Temperature.Metric.Value,\r\n                feelsTemp:w.RealFeelTemperature.Metric.Value,\r\n                hasPrec:w.HasPrecipitation,\r\n                isDay:w.IsDayTime,\r\n                pressure:w.Pressure.Metric.Value,\r\n                pressureTendency:w.PressureTendency.LocalizedText,\r\n                uvIndex:w.UVIndex,\r\n                visibility:w.Visibility.Metric.Value,\r\n                weatherText:w.WeatherText,\r\n                wind:w.Wind.Speed.Metric.Value,\r\n                windDirection:w.Wind.Direction.Degrees,\r\n                localTime:w.LocalObservationDateTime.slice(0,16).replace(\"T\",\" \"),\r\n        })\r\n    } \r\n     \r\n    async getHourlyWeather(){\r\n        \r\n        const res = await fetch(`https://dataservice.accuweather.com/forecasts/v1/hourly/12hour/${this.state.locationKey}?apikey=tYgqPzMGuVb2X0eBKTeMDLAODRNzpD8x&details=true`)\r\n        const data = await res.json();\r\n        console.log(data)\r\n        if(data.length!==0){\r\n        this.setState({\r\n      \r\n        hourlyTime: data.map(o=>{\r\n        const hour = parseInt(o.DateTime.slice(11,13))\r\n        if(hour<=12){\r\n          return hour+\"am\"\r\n        }\r\n        else{\r\n          return hour-12+\"pm\"\r\n        }\r\n      }\r\n        ),\r\n      hourlyWindSpeed:data.map(o=>o.Wind.Speed.Value),\r\n\r\n      hourlyTemp:data.map(o=>{\r\n        let temp = parseInt(o.Temperature.Value)\r\n        return Math.round(((temp-32)*5)/9);\r\n      })\r\n         // converting to celsius\r\n      })\r\n      }\r\n      }\r\n      \r\n\r\n    componentDidUpdate(prevProps,prevState) {\r\n\r\n        if(this.state.userCity !== prevState.userCity){\r\n            this.getLocationKey();\r\n        }\r\n        \r\n        if(this.state.locationKey !== prevState.locationKey){\r\n            this.getCurrentWeather();\r\n            this.getHourlyWeather();\r\n        }\r\n      }\r\n    \r\n\r\n      handleCity(){\r\n        const city = document.getElementById(\"search-city\").value;\r\n        this.setState({\r\n            userCity:city\r\n        })\r\n      }\r\n    \r\n      setKey(e){\r\n        document.getElementById(\"cities-list\").display=\"none\"\r\n\r\n          let i = e.target.getAttribute('data-key')\r\n          console.log(i)\r\n          let finalKey = this.state.keys[i]\r\n          this.setState({\r\n              locationKey:finalKey\r\n         })\r\n\r\n      }\r\n\r\n      toggleCities(){\r\n        const cList = document.getElementById(\"cities-list\")\r\n        cList.style.display=\"block\"\r\n          this.setState({\r\n              userCity:document.getElementById(\"search-city\").value,\r\n              places:[]\r\n          })\r\n        \r\n        \r\n\r\n        \r\n      }\r\n    render(){\r\n        const dateTime = this.state.localTime;\r\n        const time = dateTime.slice(11)\r\n\r\n    return (\r\n        <div id=\"main-container\">\r\n\r\n            <header>\r\n            <p id=\"title\">Weather App</p>\r\n            <div className=\"search-form\">\r\n            <input type=\"text\" id=\"search-city\"\r\n            placeholder={this.state.userCity}/>\r\n            <div id=\"cities-list\">\r\n                {this.state.places.map((place,index)=>\r\n                    <button key={index} data-key={index} onClick={(e)=>{this.setKey(e)}}>{place}</button>\r\n                )}\r\n                  \r\n             </div>\r\n\r\n            <i onClick={this.toggleCities} className=\"fas fa-arrow-alt-circle-right\"></i>\r\n            </div>\r\n             \r\n            </header>\r\n            \r\n            <div id=\"inner-container\">\r\n\r\n            <div id=\"box1\">\r\n            <p id=\"temp-value\">{this.state.temp}<sup style={{fontSize:18+\"px\"}}>o</sup>C</p>\r\n            <p className=\"other-info\">feels like- <span className=\"val-color\">{this.state.feelsTemp}<sup style={{fontSize:18+\"px\"}}>o</sup>C</span></p>\r\n            <span className=\"other-info\">Pressure- <span className=\"val-color\">{this.state.pressure}mb </span></span>\r\n            {this.state.pressureTendency===\"falling\" && <i className=\"val-color fas fa-arrow-down\"></i>}\r\n            {this.state.pressureTendency===\"rising\" && <i className=\" val-color fas fa-arrow-up\"></i>}\r\n\r\n            <p className=\"other-info\">UV Index- <span className=\"val-color\">{this.state.uvIndex}</span></p>\r\n\r\n            <p className=\"other-info\">Visibilty- <span className=\"val-color\">{this.state.visibility}km</span></p>\r\n            <p className=\"other-info\">Wind- <span className=\"val-color\">{this.state.wind}km/h at {this.state.windDirection}<sup>o</sup></span></p>\r\n            \r\n            </div>\r\n\r\n            \r\n            <div id=\"box2\">\r\n            <p id=\"weather-text\">{this.state.weatherText}</p>\r\n            {(this.state.hasPrec && this.state.isDay && <i className=\"s fas fa-cloud-sun-rain\"></i>) ||\r\n            (!this.state.hasPrec && this.state.isDay && (this.state.weatherText===\"Cloudy\" ||this.state.weatherText===\"Mostly cloudy\") && <i className=\"s fas fa-cloud-sun\"></i>)||\r\n            (this.state.hasPrec && !this.state.isDay && <i className=\"s fas fa-cloud-moon-rain\"></i>)||\r\n            (!this.state.hasPrec && !this.state.isDay && <i className=\"s fas fa-moon\"></i>)||\r\n            (!this.state.hasPrec && this.state.isDay && <i className=\"s fas fa-sun\"></i>)}\r\n            </div>\r\n\r\n            \r\n            <div id=\"box3\">\r\n                <p id=\"date-time\">{time}</p>\r\n            <HourlyTemp hTemp={this.state.hourlyTemp}\r\n                        hTime={this.state.hourlyTime}/>\r\n            </div>\r\n\r\n            \r\n             \r\n           \r\n            </div>\r\n\r\n            <HourlyWind hTime={this.state.hourlyTime}\r\n                        hWindSpeed={this.state.hourlyWindSpeed}/>\r\n\r\n            \r\n\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react'\r\nimport './App.css'\r\nimport Weather from './components/Weather'\r\n\r\nconst App = () =>{\r\n    return(\r\n        <div>          \r\n            <Weather/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}